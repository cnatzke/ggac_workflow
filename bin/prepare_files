#!/bin/bash
# Get values from a .ini file
function iniget() {
    if [[ $# -lt 2 || ! -f $1 ]]; then
        echo "usage: iniget <file> [--list|<section> [key]]"
        return 1
    fi
    local inifile=$1

    if [ "$2" == "--list" ]; then
        for section in $(cat $inifile | grep "^\\s*\[" | sed -e "s#\[##g" | sed -e "s#\]##g"); do
            echo $section
        done
        return 0
    fi

    local section=$2
    local key
    [ $# -eq 3 ] && key=$3

    # This awk line turns ini sections => [section-name]key=value
    local lines=$(awk '/\[/{prefix=$0; next} $1{print prefix $0}' $inifile)
    lines=$(echo "$lines" | sed -e 's/[[:blank:]]*=[[:blank:]]*/=/g')
    while read -r line ; do
        if [[ "$line" = \[$section\]* ]]; then
            local keyval=$(echo "$line" | sed -e "s/^\[$section\]//")
            if [[ -z "$key" ]]; then
                echo $keyval
            else
                if [[ "$keyval" = $key=* ]]; then
                    echo $(echo $keyval | sed -e "s/^$key=//")
                fi
            fi
        fi
    done <<<"$lines"
}

# parse ini file
Z=$(iniget $1 simulation z)
A=$(iniget $1 simulation a)
R=145

if [[ $# != 3 ]]; then
    echo "usage: prepare_files <config file> <z_dist> <output filename>"
    exit 1
else
    echo "Preparing run macro ... "
    /app/prepare_files.py -z $Z -a $A -d $2 -r $R
    echo "Preparing run macro ... [DONE]"

    # Renaming output files for better record keeping
    if [[ -e run_macro.mac ]]; then
        mv run_macro.mac $3
        cp $1 simulation_$2.cfg
        exit 0
    else
        echo "Something went wrong"
        exit 1
    fi
fi
